{
	"openapi": "3.0.3",
	"info": {
		"title": "MyMovies API",
		"description": "This is my MyMovies backend documentation\n\nSome useful links:\n- [The Backend repository](https://github.com/galrothschild/finalProjectHackerUBack)\n- [The Frontend repository](https://github.com/galrothschild/finalProjectFront)",
		"contact": {
			"email": "gal.rothschildf@gmail.com"
		},
		"version": "1.0.0"
	},
	"servers": [
		{
			"url": "https://localhost:3000"
		}
	],
	"tags": [
		{
			"name": "tv",
			"description": "Everything to do with tv shows"
		},
		{
			"name": "movies",
			"description": "Everything to do with movies"
		},
		{
			"name": "credits",
			"description": "Movies and TV Credits and cast"
		},
		{
			"name": "users",
			"description": "Operations about users"
		}
	],
	"paths": {
		"/tv": {
			"get": {
				"tags": ["tv"],
				"summary": "Get TV shows",
				"description": "Fetch TV shows from TMDB with optional search query.",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"required": false,
						"description": "Page number for pagination.",
						"schema": {
							"type": "integer",
							"default": 1
						}
					},
					{
						"name": "query",
						"in": "query",
						"required": false,
						"description": "Search query string.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response with list of TV shows.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TVShowListResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid page number.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/tv/filter": {
			"get": {
				"tags": ["tv"],
				"summary": "Filter TV shows by genres",
				"description": "Fetch TV shows from TMDB filtered by genres.",
				"parameters": [
					{
						"name": "genres",
						"in": "query",
						"required": true,
						"description": "Comma-separated list of genre IDs.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"description": "Page number for pagination.",
						"schema": {
							"type": "integer",
							"default": 1
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response with list of filtered TV shows.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TVShowListResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid filter or page number.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/tv/genres": {
			"get": {
				"tags": ["tv"],
				"summary": "Get TV genres",
				"description": "Fetch TV genres from TMDB.",
				"responses": {
					"200": {
						"description": "Successful response with list of genres.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenreListResponse"
								}
							}
						}
					}
				}
			}
		},
		"/tv/{id}": {
			"get": {
				"tags": ["tv"],
				"summary": "Get TV show details",
				"description": "Fetch detailed information of a TV show by ID.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the TV show.",
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response with TV show details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TVShowResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid TV show ID.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "TV show not found.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": ["tv"],
				"summary": "Update user's TV show watchlist",
				"description": "Add or remove a TV show from the user's watchlist.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the TV show.",
						"schema": {
							"type": "integer"
						}
					}
				],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated watchlist.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "TV show or user not found.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/tv/{id}/credits": {
			"get": {
				"tags": ["tv"],
				"summary": "Get TV show credits",
				"description": "Fetch credits information of a TV show by ID.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the TV show.",
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response with TV show credits.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreditsResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid TV show ID.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "TV show not found.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/tv/{id}/watched": {
			"patch": {
				"tags": ["tv"],
				"summary": "Update user's watched TV shows",
				"description": "Add or remove a TV show from the user's watched list.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the TV show.",
						"schema": {
							"type": "integer"
						}
					}
				],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated watched list.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "TV show or user not found.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/movies": {
			"get": {
				"tags": ["movies"],
				"summary": "Get movies",
				"description": "Fetch movies from TMDB with optional search query.",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"required": false,
						"description": "Page number for pagination.",
						"schema": {
							"type": "integer",
							"default": 1
						}
					},
					{
						"name": "query",
						"in": "query",
						"required": false,
						"description": "Search query string.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response with list of movies.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MovieListResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid page number.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/movies/filter": {
			"get": {
				"tags": ["movies"],
				"summary": "Filter movies by genres",
				"description": "Fetch movies from TMDB filtered by genres.",
				"parameters": [
					{
						"name": "genres",
						"in": "query",
						"required": true,
						"description": "Comma-separated list of genre IDs.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "page",
						"in": "query",
						"required": false,
						"description": "Page number for pagination.",
						"schema": {
							"type": "integer",
							"default": 1
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response with list of filtered movies.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MovieListResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid filter or page number.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/movies/genres": {
			"get": {
				"tags": ["movies"],
				"summary": "Get movie genres",
				"description": "Fetch movie genres from TMDB.",
				"responses": {
					"200": {
						"description": "Successful response with list of genres.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GenreListResponse"
								}
							}
						}
					}
				}
			}
		},
		"/movies/{id}": {
			"get": {
				"tags": ["movies"],
				"summary": "Get movie details",
				"description": "Fetch detailed information of a movie by ID.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the movie.",
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful response with movie details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MovieResponse"
								}
							}
						}
					},
					"400": {
						"description": "Invalid movie ID.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "Movie not found.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": ["movies"],
				"summary": "Update user's movie watchlist",
				"description": "Add or remove a movie from the user's watchlist.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the movie.",
						"schema": {
							"type": "integer"
						}
					}
				],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated watchlist.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "Movie or user not found.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/movies/{id}/watched": {
			"patch": {
				"tags": ["movies"],
				"summary": "Update user's watched movies",
				"description": "Add or remove a movie from the user's watched list.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the movie.",
						"schema": {
							"type": "integer"
						}
					}
				],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated watched list.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"404": {
						"description": "Movie or user not found.",
						"content": {
							"text/plain": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/credits/{id}": {
			"get": {
				"tags": ["credits"],
				"summary": "Get credits by cast member ID",
				"description": "Retrieves the credits of a cast member by their ID.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the cast member to retrieve credits for",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Credits found",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Credit"
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid cast member ID"
					},
					"404": {
						"description": "Cast member not found"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/users": {
			"post": {
				"summary": "Create a new user",
				"description": "Creates a new user if the email or username doesn't already exist.",
				"requestBody": {
					"description": "User object to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/User"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "User created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"400": {
						"description": "Bad request, user already exists"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"get": {
				"summary": "Get all users",
				"description": "Retrieves a list of all users. Accessible only by admins.",
				"security": [
					{
						"BearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "List of users",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/User"
									}
								}
							}
						}
					},
					"403": {
						"description": "Forbidden, user is not an admin"
					},
					"404": {
						"description": "No users found"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/users/{id}": {
			"get": {
				"summary": "Get user by ID",
				"description": "Retrieves a user by their ID.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the user to retrieve",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"404": {
						"description": "User not found"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"delete": {
				"summary": "Delete a user by ID",
				"description": "Deletes a user by their ID.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the user to delete",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "User deleted successfully"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"put": {
				"summary": "Update user by ID",
				"description": "Updates a user by their ID.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "ID of the user to update",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "User object with updated information",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/User"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "User updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"400": {
						"description": "Bad request, user already exists"
					},
					"404": {
						"description": "User not found"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/users/login": {
			"post": {
				"summary": "User login",
				"description": "Logs in a user and returns an authentication token.",
				"requestBody": {
					"description": "Login credentials",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginUser"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Login successful, returns token",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Invalid credentials"
					},
					"403": {
						"description": "User locked after multiple attempts"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/users/refresh-token": {
			"post": {
				"summary": "Refresh authentication token",
				"description": "Refreshes the authentication token using a valid refresh token.",
				"responses": {
					"200": {
						"description": "Token refreshed successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"403": {
						"description": "Invalid refresh token"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/users/logout": {
			"post": {
				"summary": "Log out user",
				"description": "Logs out the user by clearing the refresh token cookie.",
				"responses": {
					"200": {
						"description": "Logged out successfully"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/users/watchlist": {
			"get": {
				"summary": "Get user's watchlist",
				"description": "Retrieves all TV shows and movies in the user's watchlist.",
				"security": [
					{
						"BearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "Watchlist retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"tv": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/TVShow"
											}
										},
										"movies": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/Movie"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/users/watchlist/tv-shows": {
			"get": {
				"summary": "Get user's watched TV shows",
				"description": "Retrieves all TV shows in the user's watchlist.",
				"security": [
					{
						"BearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "Watched TV shows retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/TVShow"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/users/watchlist/movies": {
			"get": {
				"summary": "Get user's watched movies",
				"description": "Retrieves all movies in the user's watchlist.",
				"security": [
					{
						"BearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "Watched movies retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Movie"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Genre": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"name": {
						"type": "string"
					}
				}
			},
			"ProductionCompany": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"logo_path": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"origin_country": {
						"type": "string"
					}
				}
			},
			"ProductionCountry": {
				"type": "object",
				"properties": {
					"iso_3166_1": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				}
			},
			"SpokenLanguage": {
				"type": "object",
				"properties": {
					"english_name": {
						"type": "string"
					},
					"iso_639_1": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				}
			},
			"Episode": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"name": {
						"type": "string"
					},
					"overview": {
						"type": "string"
					},
					"vote_average": {
						"type": "number"
					},
					"vote_count": {
						"type": "integer"
					},
					"air_date": {
						"type": "string"
					},
					"episode_number": {
						"type": "integer"
					},
					"episode_type": {
						"type": "string"
					},
					"production_code": {
						"type": "string"
					},
					"season_number": {
						"type": "integer"
					},
					"show_id": {
						"type": "integer"
					}
				}
			},
			"LastEpisodeToAir": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"name": {
						"type": "string"
					},
					"overview": {
						"type": "string"
					},
					"vote_average": {
						"type": "number"
					},
					"vote_count": {
						"type": "integer"
					},
					"air_date": {
						"type": "string"
					},
					"episode_number": {
						"type": "integer"
					},
					"episode_type": {
						"type": "string"
					},
					"production_code": {
						"type": "string"
					},
					"runtime": {
						"type": "integer"
					},
					"season_number": {
						"type": "integer"
					},
					"show_id": {
						"type": "integer"
					},
					"still_path": {
						"type": "string"
					}
				}
			},
			"Network": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer"
					},
					"logo_path": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"origin_country": {
						"type": "string"
					}
				}
			},
			"Season": {
				"type": "object",
				"properties": {
					"air_date": {
						"type": "string"
					},
					"episode_count": {
						"type": "integer"
					},
					"id": {
						"type": "integer"
					},
					"name": {
						"type": "string"
					},
					"overview": {
						"type": "string"
					},
					"poster_path": {
						"type": "string"
					},
					"season_number": {
						"type": "integer"
					},
					"vote_average": {
						"type": "number"
					}
				}
			},
			"TVShow": {
				"type": "object",
				"properties": {
					"backdrop_path": {
						"type": "string"
					},
					"first_air_date": {
						"type": "string"
					},
					"genres": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Genre"
						}
					},
					"id": {
						"type": "integer"
					},
					"in_production": {
						"type": "boolean"
					},
					"last_air_date": {
						"type": "string"
					},
					"last_episode_to_air": {
						"$ref": "#/components/schemas/LastEpisodeToAir"
					},
					"next_episode_to_air": {
						"$ref": "#/components/schemas/Episode"
					},
					"networks": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Network"
						}
					},
					"number_of_episodes": {
						"type": "integer"
					},
					"number_of_seasons": {
						"type": "integer"
					},
					"origin_country": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"original_name": {
						"type": "string"
					},
					"overview": {
						"type": "string"
					},
					"popularity": {
						"type": "number"
					},
					"poster_path": {
						"type": "string"
					},
					"production_companies": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProductionCompany"
						}
					},
					"seasons": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Season"
						}
					},
					"status": {
						"type": "string"
					},
					"tagline": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"cast": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/CastMember"
						}
					}
				}
			},
			"CastMember": {
				"type": "object",
				"properties": {
					"gender": {
						"type": "integer"
					},
					"id": {
						"type": "integer"
					},
					"known_for_department": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"original_name": {
						"type": "string"
					},
					"profile_path": {
						"type": "string"
					},
					"character": {
						"type": "string"
					},
					"credit_id": {
						"type": "string"
					},
					"order": {
						"type": "integer"
					},
					"job": {
						"type": "string"
					},
					"roles": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"credit_id": {
									"type": "string"
								},
								"character": {
									"type": "string"
								},
								"episode_count": {
									"type": "integer"
								}
							}
						}
					}
				}
			},
			"Movie": {
				"type": "object",
				"properties": {
					"adult": {
						"type": "boolean"
					},
					"backdrop_path": {
						"type": "string"
					},
					"budget": {
						"type": "integer"
					},
					"genres": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Genre"
						}
					},
					"homepage": {
						"type": "string"
					},
					"id": {
						"type": "integer"
					},
					"imdb_id": {
						"type": "string"
					},
					"origin_country": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"original_language": {
						"type": "string"
					},
					"original_title": {
						"type": "string"
					},
					"overview": {
						"type": "string"
					},
					"popularity": {
						"type": "number"
					},
					"poster_path": {
						"type": "string"
					},
					"production_companies": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProductionCompany"
						}
					},
					"production_countries": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProductionCountry"
						}
					},
					"release_date": {
						"type": "string"
					},
					"revenue": {
						"type": "number"
					},
					"runtime": {
						"type": "number"
					},
					"spoken_languages": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/SpokenLanguage"
						}
					},
					"status": {
						"type": "string"
					},
					"tagline": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"video": {
						"type": "boolean"
					},
					"vote_average": {
						"type": "number"
					},
					"vote_count": {
						"type": "integer"
					}
				}
			},
			"User": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"image": {
						"type": "string"
					},
					"name": {
						"type": "object",
						"properties": {
							"first": {
								"type": "string"
							},
							"last": {
								"type": "string"
							},
							"middle": {
								"type": "string"
							}
						}
					},
					"isAdmin": {
						"type": "boolean"
					},
					"watchList": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"type": {
									"type": "string",
									"enum": ["tv show", "movie"]
								},
								"id": {
									"type": "string"
								},
								"watched": {
									"type": "boolean"
								}
							}
						}
					}
				}
			},
			"LoginUser": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				}
			},
			"CastAppearance": {
				"type": "object",
				"properties": {
					"role": {
						"type": "string"
					},
					"castMemberID": {
						"type": "string"
					},
					"appearedIn": {
						"type": "string"
					},
					"appearedInType": {
						"type": "string",
						"enum": ["movie", "tvshow"]
					},
					"credit_id": {
						"type": "string"
					}
				}
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
